class InvalidEmailError(Exception):
    """Excepci√≥n cuando el formato de correo es inv√°lido."""
    def __init__(self, email):
        super().__init__(f"El correo '{email}' no tiene un formato v√°lido.")

class EmailAlreadyExistsError(Exception):
    """Excepci√≥n cuando el correo ya est√° registrado en la base de datos."""
    def __init__(self, email):
        super().__init__(f"‚ùå Error: El correo '{email}' ya est√° registrado. Ingrese otro.")

class InvalidPhoneError(Exception):
    """Excepci√≥n cuando el tel√©fono no es num√©rico o es demasiado corto."""
    def __init__(self, phone):
        super().__init__(f"El tel√©fono '{phone}' debe contener solo n√∫meros y al menos 7 d√≠gitos.")

class InvalidPriceError(Exception):
    """Excepci√≥n cuando el precio de una habitaci√≥n es negativo."""
    def __init__(self, price):
        super().__init__(f"El precio '{price}' debe ser un n√∫mero valido o positivo")

class InvalidPasswordError(Exception):
    """Excepci√≥n para que la contrase√±a sea almenos de 8 digitos"""
    def __init__(self, password):
        super().__init__(f"La contrase√±a '{password} debe ser almenos de 8 digitos'")

class IdAlreadyExistsError(Exception):
    """Excepci√≥n cuando el ID ya est√° registrado en la base de datos."""
    def __init__(self, id):
        super().__init__(f"‚ùå Error: El ID '{id}' ya est√° registrado. Ingrese otro.")

class ExceptionsGenerals:
    @staticmethod
    def id_exists(db, id):
        query = "SELECT id FROM employee WHERE id = %s"
        result = db.execute_query(query, (id,))

        print(f"üîç ID encontrado en BD: {result}")

        if result:
            return True

        return False
